{"version":3,"sources":["components/Titlebar.js","components/GamePiece.js","components/Gameboard.js","App.js","serviceWorker.js","index.js"],"names":["Titlebar","react_default","a","createElement","className","React","Component","GamePiece","props","id","type","name","src","alt","width","height","onClick","clicked","starWarsImages","starwars","Gameboard","state","gameScore","highScore","gamePieceClicked","starWarsCopy","Object","toConsumableArray","_this","i","length","document","getElementById","style","display","gameReset","currentScore","currentHighScore","console","log","setState","shuffleCards","tempArray","j","Math","random","push","unshift","setTimeout","render","map","components_GamePiece","key","link","App","components_Titlebar","components_Gameboard","Boolean","window","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f860423d.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titlebar extends React.Component {\n  render() {\n    return (\n      <div className=\"containingdiv\">\n        <div className=\"titlebar\">\n          <h1 className=\"titlebar-brand\">\n            Star Wars Clicky Game</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Titlebar;\n","import React from \"react\";\n\nfunction GamePiece(props) {\n  // console.log(props);\n  return (\n    <span>\n      <input\n        id={props.id}\n        type=\"image\"\n        className=\"imgBtn\"\n        name={props.name}\n        src={props.src}\n        alt=\"Submit\"\n        width=\"145\"\n        height=\"145\"\n        onClick={() => { props.clicked(props.id) }}\n      />\n    </span>\n  );\n}\n\nexport default GamePiece;\n\n\n","import React from \"react\";\nimport starwars from \"./starwars.json\";\nimport GamePiece from \"./GamePiece\";\n\n//variable from the json file for randomizing the object order\nconst starWarsImages = starwars;\n// console.log(\"swi\", starWarsImages);\n\nclass Gameboard extends React.Component {\n  state = { starWarsImages, gameScore: 0, highScore: 0 };\n\n  gamePieceClicked = (id) => {\n    // copies the array by value, not reference\n    const starWarsCopy = [...this.state.starWarsImages]\n    // console.log(id)\n\n    for (let i = 0; i < starWarsCopy.length; i++) {\n      // console.log('gamescore', this.state.gameScore)\n\n      // user loss condition\n      if (starWarsCopy[i].id === id) {\n        if (starWarsCopy[i].clicked) {\n          // displays relevant game status div\n          document.getElementById(\"correctGuessAlert\").style.display = \"none\";\n          document.getElementById(\"gameStartAlert\").style.display = \"none\";\n          document.getElementById(\"incorrectGuessAlert\").style.display = \"block\";\n\n          // sets new high score\n          if (this.gameScore > this.highScore) {\n            this.gameScore = this.highScore\n          }\n          this.gameReset();\n        }\n        else {\n          // changes state of gamepiece to 'clicked'\n          starWarsCopy[i].clicked = true;\n          document.getElementById(\"incorrectGuessAlert\").style.display = \"none\";\n          document.getElementById(\"correctGuessAlert\").style.display = \"block\";\n          document.getElementById(\"gameStartAlert\").style.display = \"none\";\n\n          let currentScore = this.state.gameScore;\n          currentScore++\n          let currentHighScore = this.state.highScore;\n          console.log(\"cs:\", currentScore, \"chs:\", currentHighScore)\n\n          if (currentScore > currentHighScore) {\n            currentHighScore = currentScore;\n          };\n          if (currentScore === 12) {\n            this.setState({ highScore: currentHighScore });\n            // alert(\"winner!\")\n            this.gameReset()\n          }\n          else {\n            this.setState({ starWarsImages: this.shuffleCards(starWarsCopy), gameScore: currentScore, highScore: currentHighScore });\n            // console.log(\"cs:\", currentScore, \"chs:\", currentHighScore)\n          };\n        };\n      }\n    }\n  }\n\n  shuffleCards = (starWarsCopy) => {\n    let tempArray = []\n    for (let j = 0; j < starWarsCopy.length; j++) {\n      if (Math.random() >= .5) {\n        tempArray.push(starWarsCopy[j]);\n      }\n      else {\n        tempArray.unshift(starWarsCopy[j]);\n      };\n    };\n    return tempArray;\n  };\n\n  gameReset = () => {\n    //resets all game pieces to clicked = false\n    for (let j = 0; j < starWarsImages.length; j++) {\n      starWarsImages[j].clicked = false;\n    };\n    this.setState({ starWarsImages: this.shuffleCards(starWarsImages), gameScore: 0 });\n    document.getElementById(\"correctGuessAlert\").style.display = \"none\";\n\n    setTimeout(() => {\n      document.getElementById(\"incorrectGuessAlert\").style.display = \"none\";\n      document.getElementById(\"gameStartAlert\").style.display = \"block\";\n    }, 1000);\n  };\n\n  render = () => {\n    return (\n      <div className=\"containingdiv\">\n        <br />\n        <div id=\"scoreBox\"><span>Your score: {this.state.gameScore}  |  High score: {this.state.highScore}</span></div>\n\n        <br />\n        <h1 className=\"gameHeader\">Click on an image to start, <br />but don't click on an image more than once.</h1>\n        <hr />\n        <h2 id=\"gameStartAlert\">Click any image to begin</h2>\n        <h2 id=\"correctGuessAlert\">You guessed correctly! </h2>\n        <h2 id=\"incorrectGuessAlert\">You guessed incorrectly! </h2>\n        <div className=\"container\">\n\n          {this.state.starWarsImages.map(starWarsImages => (\n            <GamePiece\n              id={starWarsImages.id}\n              key={starWarsImages.id}\n              name={starWarsImages.name}\n              src={starWarsImages.link}\n              clicked={this.gamePieceClicked}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Gameboard;\n","import React, { Component } from \"react\";\nimport Titlebar from \"./components/Titlebar\";\nimport Gameboard from \"./components/Gameboard\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Titlebar />\n        <Gameboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}